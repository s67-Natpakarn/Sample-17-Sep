int[][] arr = new int[4][4];
int attempts = 0, point = 0;
int[] first_click = null;  
int[] second_click = null; 
boolean[][] revealed = new boolean[4][4];
int gridSize;
int revealTime = 60;
int revealCounter = 0;

void setup() {
  size(600, 600);
  gridSize = width / 4;
  strokeWeight(2);
  getIntToGrid(arr);
  drawGrid();
}

void draw() {
  drawGrid();

  if (revealCounter > 0) {
    revealCounter--;  // Decrease counter

    if (revealCounter == 0) {
      check_match();  // Check match when the countdown finishes
    }
  }
}

void drawGrid() {
  background(255);
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      rect(i * gridSize, j * gridSize, gridSize, gridSize);

      if (revealed[i][j] || (first_click != null && first_click[0] == i && first_click[1] == j) || (second_click != null && second_click[0] == i && second_click[1] == j)) {
        fill(0);
        textAlign(CENTER, CENTER);
        textSize(32);
        text(arr[i][j], i * gridSize + gridSize / 2, j * gridSize + gridSize / 2);
        fill(255);
      }
    }
  }
}

void mousePressed() {
  if (revealCounter > 0) {
    return;
  }

  int row = mouseX / gridSize;
  int col = mouseY / gridSize;

  if (revealed[row][col]) {
    return;
  }
  if (first_click == null) {
    first_click = new int[] {row, col};
    revealed[row][col] = true;
  }else{
    second_click = new int[] {row, col};
    revealed[row][col] = true;
    revealCounter = revealTime;
  }
}

void check_match() {
  attempts++;
  
  int row1 = first_click[0];
  int col1 = first_click[1];
  int row2 = second_click[0];
  int col2 = second_click[1];

  if (arr[row1][col1] == arr[row2][col2]) {
    points++;
    println("Match! Points: " + points + ", Attempts: " + attempts);
  } else {
    revealed[row1][col1] = false;
    revealed[row2][col2] = false;
    println("No match. Attempts: " + attempts);
  }

  first_click = null;
  second_click = null;

  if (points == 8) {
    println("You win! Total attempts: " + attempts);
    noLoop();  // Stop the game
  }
}

void getIntToGrid(int[][] arr) {
  int[] RealNum = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8};
  shuffleIntArray(RealNum);
  int index = 0;

  for (int i = 0; i < arr.length; i++) {
    for (int j = 0; j < arr[i].length; j++) {
      arr[i][j] = RealNum[index];
      index++;
    }
  }
}

void shuffleIntArray(int[] array) {
  for (int i = array.length - 1; i > 0; i--) {
    int j = (int) random(i + 1);
    int temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}